# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qUyHt5YAIBYpfPDoM-QTHgSoVF5CfZPn
"""

#pip install streamlit

import streamlit as st
import pandas as pd
import joblib

# Load the trained model
model = joblib.load(open('logistic_model.pkl', 'rb'))

# Title
st.title("Titanic Survival Prediction")

# Introduction
st.write("""
This app predicts whether a passenger survived the Titanic disaster based on their features.
""")

# Sidebar inputs
# Sidebar for user input parameters
st.sidebar.header('Input Passenger Data')

def user_input_features():
    PassengerId = st.sidebar.number_input('PassengerId', min_value=1, max_value=100000, value=1)
    Pclass = st.sidebar.selectbox('Pclass', (1, 2, 3))
    Age = st.sidebar.slider('Age', 0, 100, 25)
    SibSp = st.sidebar.slider('SibSp', 0, 10, 0)
    Parch = st.sidebar.slider('Parch', 0, 10, 0)
    Fare = st.sidebar.slider('Fare', 0.0, 500.0, 50.0)
    Sex = st.sidebar.selectbox('Sex', ('male', 'female'))
    Embarked = st.sidebar.selectbox('Embarked', ('C', 'Q', 'S'))

    data = {
        'PassengerId': PassengerId,
        'Pclass': Pclass,
        'Age': Age,
        'SibSp': SibSp,
        'Parch': Parch,
        'Fare': Fare,
        'Sex': Sex,
        'Embarked': Embarked
    }
    features = pd.DataFrame(data, index=[0])
    return features

input_df = user_input_features()

# Encode categorical variables
def encode_categorical(df):
    df['Sex'] = df['Sex'].map({'male': 1, 'female': 0})
    df = pd.get_dummies(df, columns=['Embarked'], drop_first=False)
    return df

input_df = encode_categorical(input_df)

# Ensure all columns are present
required_columns = ['PassengerId', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Sex_female','Sex_male', 'Embarked_C', 'Embarked_Q', 'Embarked_S']
for col in required_columns:
    if col not in input_df.columns:
        input_df[col] = 0

input_df = input_df[required_columns]

# Display user input
st.subheader('Input Passenger Data')
input_html = input_df.to_html(index=False)
st.write(input_html, unsafe_allow_html=True)

# Prediction
prediction = model.predict(input_df)
prediction_proba = model.predict_proba(input_df)

# Display prediction
st.subheader('Prediction')
survived = 'Survived' if prediction[0] == 1 else 'Not Survived'
st.write(survived)

# Display prediction probability

#st.subheader('Prediction Probability')
#st.write(prediction_proba)

#st.subheader('Prediction Probability')
#proba_df = pd.DataFrame({
#    'Probability of Not Surviving': [prediction_proba[0][0]],
#    'Probability of Surviving': [prediction_proba[0][1]]
#})
#st.write(proba_df)

st.subheader('Prediction Probability')
proba_df = pd.DataFrame({
    'Probability of Not Surviving': [f"{int(prediction_proba[0][0] * 100)}%"],
    'Probability of Surviving': [f"{int(prediction_proba[0][1] * 100)}%"]
})
#proba_df = proba_df.reset_index(drop=True)
#st.write(proba_df)
proba_html = proba_df.to_html(index=False)
st.write(proba_html, unsafe_allow_html=True)
